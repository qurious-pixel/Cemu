name: Build Cemu

on:
  workflow_call:
    inputs:
      deploymode:
        required: false
        type: string
      experimentalversion:
        required: false
        type: string

env:
  VCPKG_ROOT: "${{github.workspace}}/dependencies/vcpkg"
  VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'

jobs:
  build-ubuntu:
    runs-on: ubuntu-22.04
    steps:
    - name: "Checkout repo"
      uses: actions/checkout@v3
      with:
        repository: cemu-project/Cemu
        ref: main
        submodules: "recursive"
        fetch-depth: 0

    - name: "Fetch full history for vcpkg submodule"
      run: |
        cd dependencies/vcpkg
        git fetch --unshallow
        git pull --all

    - name: Setup release mode parameters (for deploy)
      if: ${{ inputs.deploymode == 'release' }}
      run: |
        echo "BUILD_MODE=release" >> $GITHUB_ENV
        echo "BUILD_FLAGS=" >> $GITHUB_ENV
        echo "Build mode is release"
    - name: Setup debug mode parameters (for continous build)
      if: ${{ inputs.deploymode != 'release' }}
      run: |
        echo "BUILD_MODE=debug" >> $GITHUB_ENV
        echo "BUILD_FLAGS=" >> $GITHUB_ENV
        echo "Build mode is debug"
        
    - name: Setup version for experimental
      if: ${{ inputs.experimentalversion != '' }}
      run: |
        echo "[INFO] Experimental version ${{ inputs.experimentalversion }}"
        echo "BUILD_FLAGS=${{ env.BUILD_FLAGS }} -DEXPERIMENTAL_VERSION=${{ inputs.experimentalversion }}" >> $GITHUB_ENV
        
    - name: "Install system dependencies"
      run: |
        sudo apt update -qq
        sudo apt install -y clang-12 cmake freeglut3-dev libgcrypt20-dev libgtk-3-dev libpulse-dev libsecret-1-dev libsystemd-dev nasm ninja-build libudev-dev appstream
    - name: "Bootstrap vcpkg"
      run: |
        bash ./dependencies/vcpkg/bootstrap-vcpkg.sh
        
    - name: 'Setup NuGet Credentials for vcpkg'
      shell: 'bash'
      run: |
        mono `./dependencies/vcpkg/vcpkg fetch nuget | tail -n 1` \
        sources add \
        -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
        -storepasswordincleartext \
        -name "GitHub" \
        -username "${{ github.repository_owner }}" \
        -password "${{ secrets.GITHUB_TOKEN }}"
        mono `./dependencies/vcpkg/vcpkg fetch nuget | tail -n 1` \
        setapikey "${{ secrets.GITHUB_TOKEN }}" \
        -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

    - name: "Apply patches"
      run: |
        echo patches
        #curl -s "https://patch-diff.githubusercontent.com/raw/cemu-project/Cemu/pull/439.patch" -o dark.patch
        #git apply dark.patch
      
    - name: "cmake"
      run: cmake -S . -B build ${{ env.BUILD_FLAGS }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_MODE }} -DPORTABLE=OFF -DCMAKE_C_COMPILER=/usr/bin/clang-12 -DCMAKE_CXX_COMPILER=/usr/bin/clang++-12 -G Ninja -DCMAKE_MAKE_PROGRAM=/usr/bin/ninja
        
    - name: "Build Cemu"
      run: cmake --build build

    - name: Prepare artifact
      if: ${{ inputs.deploymode == 'release' }}
      run: mv bin/Cemu_release bin/Cemu
              
    #- name: Upload artifact
    #  uses: actions/upload-artifact@v3
    #  if: ${{ inputs.deploymode == 'release' }}
    #  with:
    #    name: cemu-bin-linux-x64
    #    path: ./bin/Cemu
        
  #build-appimage:
  #  runs-on: ubuntu-22.04
  #  needs: build-ubuntu
  #  steps:
  #  - name: Checkout Upstream Repo
  #    uses: actions/checkout@v3
          
    #- uses: actions/download-artifact@v3
    #  with:
    #    name: cemu-bin-linux-x64
    #    path: bin
          
    #- name: "Install system dependencies"
    #  run: |
    #    sudo apt update -qq
    #    sudo apt install -y ccache ninja-build cmake libgtk-3-dev libsecret-1-dev libgcrypt20-dev libsystemd-dev freeglut3-dev clang-12 nasm gcc-11 g++-11 libpng-dev libpulse-dev libwxgtk-webview3.0-gtk3-0v5 libvulkan-dev
        
    - name: "Build AppImage"
      run: chmod +x dist/linux/appimage.sh && dist/linux/appimage.sh
        
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: cemu-appimage-x64
        path: artifacts      
  
