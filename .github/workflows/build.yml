name: Build Cemu

on:
  push:
    paths-ignore:
      - "*.md"
  workflow_call:
    inputs:
      deploymode:
        required: false
        type: string

jobs:    
  build-appimage:
    runs-on: ubuntu-latest
    container: centos:7
    env:
      CACHEDIR: /__w/Cemu/Cemu/deps
      INST: yum install -y --setopt=skip_missing_names_on_install=False
      CC: /opt/rh/devtoolset-11/root/usr/bin/gcc
      CPP: /opt/rh/devtoolset-11/root/usr/bin/cpp
      CXX: /opt/rh/devtoolset-11/root/usr/bin/g++
      PATH: /opt/rh/devtoolset-11/root/usr/bin:/usr/local/bin:/usr/bin:$PATH
      LD_LIBRARY_PATH: /opt/rh/devtoolset-11/root/usr/lib64:/opt/rh/devtoolset-11/root/usr/lib:/opt/rh/devtoolset-11/root/usr/lib64/dyninst:/opt/rh/devtoolset-11/root/usr/lib/dyninst:/opt/rh/devtoolset-11/root/usr/lib64:/opt/rh/devtoolset-11/root/usr/lib:$LD_LIBRARY_PATH      
    steps:
    - name: Checkout Upstream Repo
      uses: actions/checkout@v3
      with:
        repository: cemu-project/Cemu 
        ref: main
        submodules: false
    - name: Checkout AppImage Repo
      uses: actions/checkout@v3
      with:
          clean: false
          path: ci
    - name: cache
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.CACHEDIR }}
        key: build-${{github.run_id}}
        restore-keys: |
          build
          
    - name: "Install system dependencies"
      run: |
        rpmkeys --import "http://keyserver.ubuntu.com/pks/lookup?op=get&search=0x3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF"
        su -c 'curl https://download.mono-project.com/repo/centos7-stable.repo | tee /etc/yum.repos.d/mono-centos7-stable.repo'
        $INST epel-release centos-release-scl
        $INST autoconf devtoolset-11 ninja-build kernel-headers perl-core python36 python36-pip \
        libsecret-devel libgcrypt-devel systemd-devel freeglut-devel zlib-devel \
        libmount-devel bzip2-devel libselinux-devel libffi-devel gtk3-devel \
        pulseaudio-libs-devel libcurl-devel nasm mono-devel git
        python3 -m pip install --upgrade pip wheel
        python3 -m pip install cmake
    #- name: "Install Git"
    #  run: |
    #    yum remove -y git
    #    curl -L https://github.com/git/git/tarball/e9d7761bb94f20acc98824275e317fa82436c25d |\
    #    tar -xzC . --strip-components=1
    #    make configure
    #    ./configure --prefix=/usr
    #    make -j$(nproc)
    #    make install

    - name: "Temp Fixes"
      run: |
        echo "Linux Fixes"
        git apply ci/scripts/xdg.patch
        #sed -i '37,40d' vcpkg.json
        cp ci/scripts/appimage.sh dist/linux/
        cp ci/scripts/cemu.png dist/linux/info.cemu.Cemu.png
         
    - name: Setup Cache Path
      run: |
        if [[ ! -e ${{ env.CACHEDIR }} ]]; then 
          mkdir -p ${{ env.CACHEDIR }}
        fi
        ls ${{ env.CACHEDIR }}

    #- name: Build Cubeb
    #  run: |
    #    cd ${{ env.CACHEDIR }}
    #    git clone https://github.com/mozilla/cubeb
    #    cd cubeb
    #    git checkout 4783607ecc09e9493677a9c4e3db95f78d87409a
    #    git submodule update --init --recursive
    #    cmake -B ./build . 
    #    cmake --build ./build
    #    cd ./build
    #    make install
    
    - name: Build Nasm
      run: |
        NASMVER=2.15.05
        cd ${{ env.CACHEDIR }}
        if [[ ! -e nasm-${NASMVER} ]]; then
          curl -sSfLO https://www.nasm.us/pub/nasm/releasebuilds/${NASMVER}/nasm-${NASMVER}.tar.gz
          tar xf nasm-${NASMVER}.tar.gz
          cd nasm-${NASMVER}
          ./configure --prefix=/usr
          make -j$(nproc) && cd ../
          rm nasm-${NASMVER}.tar.gz
        fi
        make -C nasm-${NASMVER} install

    - name: "Install ZSTD"
      run: |
        ZSTDVER=1.5.2
        cd ${{ env.CACHEDIR }}
        if [[ ! -e zstd-${ZSTDVER} ]]; then
          curl -sSfLO https://github.com/facebook/zstd/releases/download/v${ZSTDVER}/zstd-${ZSTDVER}.tar.gz
          tar xf zstd-${ZSTDVER}.tar.gz
          cd zstd-${ZSTDVER}/build/cmake
          mkdir builddir && cd builddir
          cmake ..
          make && cd ${{ env.CACHEDIR }}
        fi
        make -C zstd-${ZSTDVER} install

    #- name: "Install imgui"
    #  run: |
    #    IMGUIVER=1.88
    #    cd ${{ env.CACHEDIR }}
    #    if [[ ! -e imgui-${IMGUIVER} ]]; then
    #      curl -sSfL https://codeload.github.com/ocornut/imgui/tar.gz/v${IMGUIVER} -o imgui-${IMGUIVER}
    #      tar xf imgui-${IMGUIVER}
    #      cd imgui-${IMGUIVER}
    #      curl -sSfLO https://raw.githubusercontent.com/microsoft/vcpkg/master/ports/imgui/CMakeLists.txt
    #      curl -sSfLO https://raw.githubusercontent.com/microsoft/vcpkg/master/ports/imgui/imgui-config.cmake.in
    #      cmake -DCMAKE_INSTALL_PREFIX=/usr -DBUILD_SHARED_LIBS=ON -S. -B cmake-build-shared
    #      cmake --build cmake-build-shared
    #      cd ../
    #    fi
    #    make -C imgui-${IMGUIVER}/cmake-build-shared install

    #- name: "Install glslang"
    #  run: |
    #    GLSLANGVER=11.11.0
    #    cd ${{ env.CACHEDIR }}
    #    if [[ ! -e glslang-${GLSLANGVER} ]]; then
    #      curl -sSfL https://github.com/KhronosGroup/glslang/archive/refs/tags/${GLSLANGVER}.tar.gz -o glslang-${GLSLANGVER}
    #      tar xf glslang-${GLSLANGVER}
    #      cd glslang-${GLSLANGVER}
    #      mkdir -p build && cd build
    #      cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="/usr"
    #      ninja && cd ../../
    #    fi
    #    ninja -C glslang-${GLSLANGVER}/build install
    #    glslangValidator --version

    - name: "Install Libzip"
      run: |
        LIBZIPVER=1.7.3
        cd ${{ env.CACHEDIR }}
        if [[ ! -e libzip-${LIBZIPVER} ]]; then
          curl -sSfLO https://libzip.org/download/libzip-${LIBZIPVER}.tar.gz
          tar -xf libzip-${LIBZIPVER}.tar.gz
          cd libzip-${LIBZIPVER}
          mkdir build && cd build
          cmake .. -DCMAKE_INSTALL_PREFIX=/usr
          make && cd ../../
          rm libzip-${LIBZIPVER}.tar.gz
        fi
        make -C libzip-${LIBZIPVER}/build install
        
    #- name: "Install fmt"
    #  run: |
    #    FMTVER=9.1.0
    #    cd ${{ env.CACHEDIR }}
    #    if [[ ! -e fmt-${FMTVER} ]]; then
    #      curl -sSfL https://github.com/fmtlib/fmt/archive/refs/tags/${FMTVER}.tar.gz -o fmt-${FMTVER}
    #      tar xf fmt-${FMTVER}
    #     cd fmt-${FMTVER}
    #     mkdir -p build && cd build
    #     cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="/usr"
    #     ninja && cd ../../
    #   fi
    #   ninja -C fmt-${FMTVER}/build install       

    #-name: "Install wxWidgets"
    #  run: |
    #    WXVER=3.2.1
    #    cd ${{ env.CACHEDIR }}
    #    if [[ ! -e wxWidgets-${WXVER} ]]; then
    #      curl -sSfLO https://github.com/wxWidgets/wxWidgets/releases/download/v${WXVER}/wxWidgets-${WXVER}.tar.bz2
    #      tar xf wxWidgets-${WXVER}.tar.bz2
    #      cd wxWidgets-${WXVER}
    #      mkdir build-gtk3 && cd build-gtk3
    #      cmake ..
    #      make && cd ../../
    #      rm wxWidgets-${WXVER}.tar.bz2
    #    fi
    #    make -C wxWidgets-${WXVER}/build-gtk3 install
    #    ln -sr /usr/local/lib/libwx_* /usr/lib/
        
    #- name: "Build Cemu"
    #  run: |
    #    cmake -S . -B build -DCMAKE_BUILD_TYPE=release -DCMAKE_C_COMPILER=${CC} -DCMAKE_CXX_COMPILER=${CXX} -DCMAKE_MAKE_PROGRAM=/usr/bin/ninja -G Ninja
    #    cmake --build build
    #    #mkdir build && cd build


    #- name: "Build AppImage"
    #  run: |
    #    chmod +x dist/linux/appimage.sh && dist/linux/appimage.sh
        
    #- name: Upload artifact
    #  uses: actions/upload-artifact@v3
    #  #if: ${{ inputs.deploymode == 'release' }}
    #  with:
    #    name: cemu-appimage-x64
    #    path: bin
        
  #build-windows:
  #  runs-on: windows-2022
  #  env:
  #    install_vulkan_folder: "$GITHUB_WORKSPACE/vulkan_sdk"
  #    install_vulkan_version: "1.3.216.0"
  #  steps:
  #  - name: "Checkout repo"
  #    uses: actions/checkout@v3
  #    with:
  #      submodules: "recursive"
  #      
  #  - name: Setup release mode parameters (for deploy)
  #    if: ${{ inputs.deploymode == 'release' }}
  #    run: |
  #      echo "BUILD_MODE=release" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
  #      echo "BUILD_FLAGS=-DPUBLIC_RELEASE=ON" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
  #      echo "Build mode is release"
  #      
  #  - name: Setup debug mode parameters (for continous build)
  #    if: ${{ inputs.deploymode != 'release' }}
  #    run: |
  #      echo "BUILD_MODE=debug" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
  #      echo "BUILD_FLAGS=" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
  #      echo "Build mode is debug"
  #      
  #  - name: Prepare Vulkan SDK
  #    uses: humbletim/setup-vulkan-sdk@v1.2.0
  #    with:
  #      vulkan-query-version: 1.3.216.0
  #      vulkan-components: Vulkan-Headers, Vulkan-Loader
  #      vulkan-use-cache: false
  #  
  #  - name: Workaround
  #    run: |
  #      Set-Location "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
  #      $InstallPath = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise"
  #      $componentsToRemove= @(
  #        "Microsoft.VisualStudio.Component.VC.14.32.17.2.ARM"
  #        "Microsoft.VisualStudio.Component.VC.14.32.17.2.ARM.Spectre"
  #        "Microsoft.VisualStudio.Component.VC.14.32.17.2.ARM64"
  #        "Microsoft.VisualStudio.Component.VC.14.32.17.2.ARM64.Spectre"
  #        "Microsoft.VisualStudio.Component.VC.14.32.17.2.x86.x64"
  #        "Microsoft.VisualStudio.Component.VC.14.32.17.2.x86.x64.Spectre"
  #        "Microsoft.VisualStudio.Component.VC.14.32.17.2.ATL"
  #        "Microsoft.VisualStudio.Component.VC.14.32.17.2.ATL.Spectre"
  #        "Microsoft.VisualStudio.Component.VC.14.32.17.2.ATL.ARM"
  #        "Microsoft.VisualStudio.Component.VC.14.32.17.2.ATL.ARM.Spectre"
  #        "Microsoft.VisualStudio.Component.VC.14.32.17.2.ATL.ARM64"
  #        "Microsoft.VisualStudio.Component.VC.14.32.17.2.ATL.ARM64.Spectre"
  #        "Microsoft.VisualStudio.Component.VC.14.32.17.2.MFC"
  #        "Microsoft.VisualStudio.Component.VC.14.32.17.2.MFC.Spectre"
  #        "Microsoft.VisualStudio.Component.VC.14.32.17.2.MFC.ARM"
  #        "Microsoft.VisualStudio.Component.VC.14.32.17.2.MFC.ARM.Spectre"
  #        "Microsoft.VisualStudio.Component.VC.14.32.17.2.MFC.ARM64"
  #        "Microsoft.VisualStudio.Component.VC.14.32.17.2.MFC.ARM64.Spectre"
  #      )
  #      [string]$workloadArgs = $componentsToRemove | ForEach-Object {" --remove " +  $_}
  #      $Arguments = ('/c', "vs_installer.exe", 'modify', '--installPath', "`"$InstallPath`"",$workloadArgs, '--quiet', '--norestart', '--nocache')
  #      # should be run twice
  #      $process = Start-Process -FilePath cmd.exe -ArgumentList $Arguments -Wait -PassThru -WindowStyle Hidden
  #      $process = Start-Process -FilePath cmd.exe -ArgumentList $Arguments -Wait -PassThru -WindowStyle Hidden#
  #
  #  - name: Configure MSVC
  #    uses: ilammy/msvc-dev-cmd@v1
  #    with:
  #      arch: amd64
  #      toolset: 14.33.31629
  #      spectre: false
  #
  #  - name: "Bootstrap vcpkg"
  #    run: |
  #      ./dependencies/vcpkg/bootstrap-vcpkg.bat
  #      
  #  - name: 'Setup NuGet Credentials for vcpkg'
  #    shell: 'bash'
  #    run: |
  #      `./dependencies/vcpkg/vcpkg.exe fetch nuget | tail -n 1` \
  #      sources add \
  #      -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
  #      -storepasswordincleartext \
  #      -name "GitHub" \
  #      -username "${{ github.repository_owner }}" \
  #      -password "${{ secrets.GITHUB_TOKEN }}"
  #      `./dependencies/vcpkg/vcpkg.exe fetch nuget | tail -n 1` \
  #      setapikey "${{ secrets.GITHUB_TOKEN }}" \
  #      -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
  #      
  #  - name: "cmake"
  #    run: |
  #      mkdir -p build
  #      cd build
  #      cmake .. ${{ env.BUILD_FLAGS }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_MODE }}
  #      
  #  - name: "Build Cemu"
  #    run: |
  #      cd build
  #      cmake --build . --config ${{ env.BUILD_MODE }} -j 2
  #      
  #  - name: Upload artifact
  #    uses: actions/upload-artifact@v3
  #    if: ${{ inputs.deploymode == 'release' }}
  #    with:
  #      name: cemu-bin-windows-x64
  #      path: ./bin/Cemu.exe
